/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PhotoService } from "../photo.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PhotoCreateInput } from "./PhotoCreateInput";
import { Photo } from "./Photo";
import { PhotoFindManyArgs } from "./PhotoFindManyArgs";
import { PhotoWhereUniqueInput } from "./PhotoWhereUniqueInput";
import { PhotoUpdateInput } from "./PhotoUpdateInput";
import { RetouchTaskFindManyArgs } from "../../retouchTask/base/RetouchTaskFindManyArgs";
import { RetouchTask } from "../../retouchTask/base/RetouchTask";
import { RetouchTaskWhereUniqueInput } from "../../retouchTask/base/RetouchTaskWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PhotoControllerBase {
  constructor(
    protected readonly service: PhotoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Photo })
  @nestAccessControl.UseRoles({
    resource: "Photo",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPhoto(@common.Body() data: PhotoCreateInput): Promise<Photo> {
    return await this.service.createPhoto({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        url: true,
        uploadedAt: true,
        uploadedBy: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Photo] })
  @ApiNestedQuery(PhotoFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Photo",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async photos(@common.Req() request: Request): Promise<Photo[]> {
    const args = plainToClass(PhotoFindManyArgs, request.query);
    return this.service.photos({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        url: true,
        uploadedAt: true,
        uploadedBy: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Photo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Photo",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async photo(
    @common.Param() params: PhotoWhereUniqueInput
  ): Promise<Photo | null> {
    const result = await this.service.photo({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        url: true,
        uploadedAt: true,
        uploadedBy: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Photo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Photo",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePhoto(
    @common.Param() params: PhotoWhereUniqueInput,
    @common.Body() data: PhotoUpdateInput
  ): Promise<Photo | null> {
    try {
      return await this.service.updatePhoto({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          url: true,
          uploadedAt: true,
          uploadedBy: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Photo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Photo",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePhoto(
    @common.Param() params: PhotoWhereUniqueInput
  ): Promise<Photo | null> {
    try {
      return await this.service.deletePhoto({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          url: true,
          uploadedAt: true,
          uploadedBy: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/retouchTasks")
  @ApiNestedQuery(RetouchTaskFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "RetouchTask",
    action: "read",
    possession: "any",
  })
  async findRetouchTasks(
    @common.Req() request: Request,
    @common.Param() params: PhotoWhereUniqueInput
  ): Promise<RetouchTask[]> {
    const query = plainToClass(RetouchTaskFindManyArgs, request.query);
    const results = await this.service.findRetouchTasks(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        taskDescription: true,
        status: true,

        photo: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/retouchTasks")
  @nestAccessControl.UseRoles({
    resource: "Photo",
    action: "update",
    possession: "any",
  })
  async connectRetouchTasks(
    @common.Param() params: PhotoWhereUniqueInput,
    @common.Body() body: RetouchTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      retouchTasks: {
        connect: body,
      },
    };
    await this.service.updatePhoto({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/retouchTasks")
  @nestAccessControl.UseRoles({
    resource: "Photo",
    action: "update",
    possession: "any",
  })
  async updateRetouchTasks(
    @common.Param() params: PhotoWhereUniqueInput,
    @common.Body() body: RetouchTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      retouchTasks: {
        set: body,
      },
    };
    await this.service.updatePhoto({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/retouchTasks")
  @nestAccessControl.UseRoles({
    resource: "Photo",
    action: "update",
    possession: "any",
  })
  async disconnectRetouchTasks(
    @common.Param() params: PhotoWhereUniqueInput,
    @common.Body() body: RetouchTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      retouchTasks: {
        disconnect: body,
      },
    };
    await this.service.updatePhoto({
      where: params,
      data,
      select: { id: true },
    });
  }
}
