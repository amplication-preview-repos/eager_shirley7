/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { RetouchTaskService } from "../retouchTask.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { RetouchTaskCreateInput } from "./RetouchTaskCreateInput";
import { RetouchTask } from "./RetouchTask";
import { RetouchTaskFindManyArgs } from "./RetouchTaskFindManyArgs";
import { RetouchTaskWhereUniqueInput } from "./RetouchTaskWhereUniqueInput";
import { RetouchTaskUpdateInput } from "./RetouchTaskUpdateInput";
import { JobFindManyArgs } from "../../job/base/JobFindManyArgs";
import { Job } from "../../job/base/Job";
import { JobWhereUniqueInput } from "../../job/base/JobWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class RetouchTaskControllerBase {
  constructor(
    protected readonly service: RetouchTaskService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RetouchTask })
  @nestAccessControl.UseRoles({
    resource: "RetouchTask",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createRetouchTask(
    @common.Body() data: RetouchTaskCreateInput
  ): Promise<RetouchTask> {
    return await this.service.createRetouchTask({
      data: {
        ...data,

        photo: data.photo
          ? {
              connect: data.photo,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        taskDescription: true,
        status: true,

        photo: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [RetouchTask] })
  @ApiNestedQuery(RetouchTaskFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "RetouchTask",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async retouchTasks(@common.Req() request: Request): Promise<RetouchTask[]> {
    const args = plainToClass(RetouchTaskFindManyArgs, request.query);
    return this.service.retouchTasks({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        taskDescription: true,
        status: true,

        photo: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RetouchTask })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "RetouchTask",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async retouchTask(
    @common.Param() params: RetouchTaskWhereUniqueInput
  ): Promise<RetouchTask | null> {
    const result = await this.service.retouchTask({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        taskDescription: true,
        status: true,

        photo: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RetouchTask })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "RetouchTask",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateRetouchTask(
    @common.Param() params: RetouchTaskWhereUniqueInput,
    @common.Body() data: RetouchTaskUpdateInput
  ): Promise<RetouchTask | null> {
    try {
      return await this.service.updateRetouchTask({
        where: params,
        data: {
          ...data,

          photo: data.photo
            ? {
                connect: data.photo,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          taskDescription: true,
          status: true,

          photo: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RetouchTask })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "RetouchTask",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteRetouchTask(
    @common.Param() params: RetouchTaskWhereUniqueInput
  ): Promise<RetouchTask | null> {
    try {
      return await this.service.deleteRetouchTask({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          taskDescription: true,
          status: true,

          photo: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/jobs")
  @ApiNestedQuery(JobFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Job",
    action: "read",
    possession: "any",
  })
  async findJobs(
    @common.Req() request: Request,
    @common.Param() params: RetouchTaskWhereUniqueInput
  ): Promise<Job[]> {
    const query = plainToClass(JobFindManyArgs, request.query);
    const results = await this.service.findJobs(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        dueDate: true,

        retouchTask: {
          select: {
            id: true,
          },
        },

        assignedTo: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/jobs")
  @nestAccessControl.UseRoles({
    resource: "RetouchTask",
    action: "update",
    possession: "any",
  })
  async connectJobs(
    @common.Param() params: RetouchTaskWhereUniqueInput,
    @common.Body() body: JobWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      jobs: {
        connect: body,
      },
    };
    await this.service.updateRetouchTask({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/jobs")
  @nestAccessControl.UseRoles({
    resource: "RetouchTask",
    action: "update",
    possession: "any",
  })
  async updateJobs(
    @common.Param() params: RetouchTaskWhereUniqueInput,
    @common.Body() body: JobWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      jobs: {
        set: body,
      },
    };
    await this.service.updateRetouchTask({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/jobs")
  @nestAccessControl.UseRoles({
    resource: "RetouchTask",
    action: "update",
    possession: "any",
  })
  async disconnectJobs(
    @common.Param() params: RetouchTaskWhereUniqueInput,
    @common.Body() body: JobWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      jobs: {
        disconnect: body,
      },
    };
    await this.service.updateRetouchTask({
      where: params,
      data,
      select: { id: true },
    });
  }
}
