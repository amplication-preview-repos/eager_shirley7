/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  RetouchTask as PrismaRetouchTask,
  Job as PrismaJob,
  Photo as PrismaPhoto,
} from "@prisma/client";

export class RetouchTaskServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RetouchTaskCountArgs, "select">
  ): Promise<number> {
    return this.prisma.retouchTask.count(args);
  }

  async retouchTasks(
    args: Prisma.RetouchTaskFindManyArgs
  ): Promise<PrismaRetouchTask[]> {
    return this.prisma.retouchTask.findMany(args);
  }
  async retouchTask(
    args: Prisma.RetouchTaskFindUniqueArgs
  ): Promise<PrismaRetouchTask | null> {
    return this.prisma.retouchTask.findUnique(args);
  }
  async createRetouchTask(
    args: Prisma.RetouchTaskCreateArgs
  ): Promise<PrismaRetouchTask> {
    return this.prisma.retouchTask.create(args);
  }
  async updateRetouchTask(
    args: Prisma.RetouchTaskUpdateArgs
  ): Promise<PrismaRetouchTask> {
    return this.prisma.retouchTask.update(args);
  }
  async deleteRetouchTask(
    args: Prisma.RetouchTaskDeleteArgs
  ): Promise<PrismaRetouchTask> {
    return this.prisma.retouchTask.delete(args);
  }

  async findJobs(
    parentId: string,
    args: Prisma.JobFindManyArgs
  ): Promise<PrismaJob[]> {
    return this.prisma.retouchTask
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .jobs(args);
  }

  async getPhoto(parentId: string): Promise<PrismaPhoto | null> {
    return this.prisma.retouchTask
      .findUnique({
        where: { id: parentId },
      })
      .photo();
  }
}
