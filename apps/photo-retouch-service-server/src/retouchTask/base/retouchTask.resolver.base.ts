/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { RetouchTask } from "./RetouchTask";
import { RetouchTaskCountArgs } from "./RetouchTaskCountArgs";
import { RetouchTaskFindManyArgs } from "./RetouchTaskFindManyArgs";
import { RetouchTaskFindUniqueArgs } from "./RetouchTaskFindUniqueArgs";
import { CreateRetouchTaskArgs } from "./CreateRetouchTaskArgs";
import { UpdateRetouchTaskArgs } from "./UpdateRetouchTaskArgs";
import { DeleteRetouchTaskArgs } from "./DeleteRetouchTaskArgs";
import { JobFindManyArgs } from "../../job/base/JobFindManyArgs";
import { Job } from "../../job/base/Job";
import { Photo } from "../../photo/base/Photo";
import { RetouchTaskService } from "../retouchTask.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => RetouchTask)
export class RetouchTaskResolverBase {
  constructor(
    protected readonly service: RetouchTaskService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RetouchTask",
    action: "read",
    possession: "any",
  })
  async _retouchTasksMeta(
    @graphql.Args() args: RetouchTaskCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RetouchTask])
  @nestAccessControl.UseRoles({
    resource: "RetouchTask",
    action: "read",
    possession: "any",
  })
  async retouchTasks(
    @graphql.Args() args: RetouchTaskFindManyArgs
  ): Promise<RetouchTask[]> {
    return this.service.retouchTasks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RetouchTask, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RetouchTask",
    action: "read",
    possession: "own",
  })
  async retouchTask(
    @graphql.Args() args: RetouchTaskFindUniqueArgs
  ): Promise<RetouchTask | null> {
    const result = await this.service.retouchTask(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RetouchTask)
  @nestAccessControl.UseRoles({
    resource: "RetouchTask",
    action: "create",
    possession: "any",
  })
  async createRetouchTask(
    @graphql.Args() args: CreateRetouchTaskArgs
  ): Promise<RetouchTask> {
    return await this.service.createRetouchTask({
      ...args,
      data: {
        ...args.data,

        photo: args.data.photo
          ? {
              connect: args.data.photo,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RetouchTask)
  @nestAccessControl.UseRoles({
    resource: "RetouchTask",
    action: "update",
    possession: "any",
  })
  async updateRetouchTask(
    @graphql.Args() args: UpdateRetouchTaskArgs
  ): Promise<RetouchTask | null> {
    try {
      return await this.service.updateRetouchTask({
        ...args,
        data: {
          ...args.data,

          photo: args.data.photo
            ? {
                connect: args.data.photo,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RetouchTask)
  @nestAccessControl.UseRoles({
    resource: "RetouchTask",
    action: "delete",
    possession: "any",
  })
  async deleteRetouchTask(
    @graphql.Args() args: DeleteRetouchTaskArgs
  ): Promise<RetouchTask | null> {
    try {
      return await this.service.deleteRetouchTask(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Job], { name: "jobs" })
  @nestAccessControl.UseRoles({
    resource: "Job",
    action: "read",
    possession: "any",
  })
  async findJobs(
    @graphql.Parent() parent: RetouchTask,
    @graphql.Args() args: JobFindManyArgs
  ): Promise<Job[]> {
    const results = await this.service.findJobs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Photo, {
    nullable: true,
    name: "photo",
  })
  @nestAccessControl.UseRoles({
    resource: "Photo",
    action: "read",
    possession: "any",
  })
  async getPhoto(@graphql.Parent() parent: RetouchTask): Promise<Photo | null> {
    const result = await this.service.getPhoto(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
